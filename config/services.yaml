# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    customer_get_cache_valid_time_min: 60
    currencies_cache_valid_time_hours: 8
    company_postal_code: 81-063
    upload_max_size_mb: 5
    uploads_dir: '%kernel.project_dir%/uploads'
    default_avatar_dir: '%kernel.project_dir%/assets/img'
    default_avatar_name: 'default-avatar.png'
    currency_api_url: 'https://api.exchangeratesapi.io/latest?base=PLN'
    max_seats_to_reserve: 30
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\DataWarehouse\:
        resource: '../src/DataWarehouse/'
        public: true
        autowire: true

    App\Service\:
        resource: '../src/Service/'
        public: true
        autowire: true

    App\Extension\QueryStringParamsConverter:
        tags:
            - { name: request.param_converter, converter: in_query }

    app.data.warehouse.category:
        class: App\DataWarehouse\CategoryDataWarehouse
        public: true
        autowire: true
        tags: [ 'data.warehouse' ]

    app.data.warehouse.subcategory:
        class: App\DataWarehouse\SubcategoryDataWarehouse
        public: true
        autowire: true
        tags: [ 'data.warehouse' ]

    app.data.warehouse.dish:
        class: App\DataWarehouse\DishDataWarehouse
        public: true
        autowire: true
        tags: [ 'data.warehouse' ]

    app.data.warehouse.reservation:
        class: App\DataWarehouse\ReservationDataWarehouse
        public: true
        autowire: true
        tags: [ 'data.warehouse' ]

    App\EventListener\MenuRequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\EventListener\ManageCategoriesRequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\EventListener\ManageSubcategoriesRequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\EventListener\ManageDishesRequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\EventListener\UploadRequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }


    App\EventListener\ManageReservationsRequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\EventListener\ContactListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\DataFactory\:
        resource: '../src/DataFactory/'
        public: true
        autowire: true

    acme_api.event.authentication_success_listener:
        class: App\EventListener\JWT\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    acme_api.event.authentication_failure_listener:
        class: App\EventListener\JWT\AuthenticationFailureListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }

    acme_api.event.jwt_notfound_listener:
        class: App\EventListener\JWT\TokenNotFoundListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound }
    acme_api.event.jwt_invalid_listener:
        class: App\EventListener\JWT\TokenInvalidListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_invalid, method: onJWTInvalid }
    acme_api.event.jwt_expired_listener:
        class: App\EventListener\JWT\JwtExpiredListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_expired, method: onJWTExpired }
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
